<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:security="http://www.springframework.org/schema/security"
   xmlns:context="http://www.springframework.org/schema/context"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.8.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- configuration 클래스 만들어서 해도 됨 -->
	<bean id="bcryptPassword" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<!-- security를 이용한 인증 처리하기 -->
	<!-- security:http 태그로 시작 -->
	<security:http auto-config="true">
		
		<!-- 인증화면(로그인화면) 커스터마이징하기 -->
		<!-- 
			security:form-login 속성으로 설정 -> 설정 안하면 기본 형식 * 각 속성 값은 컨트롤러 매핑 주소
				username-parameter : login페이지에서 보내는 id값의 key값 설정
				password-parameter : login페이지에서 보내는 password값의 key값 설정
				login-page : 로그인페이지와 연결되는 url주소
				default-target-url : 인증 후 연결될 기본 주소 설정 -> 설정 안하면 이전페이지로 이동
				authentication-failure-forward-url : 인증 실패 후 연결될 서비스 (ex.인증 5번 실패 시 1분간 로그인 못하게 등)
				authentication-success-forward-url : 인증 성공 후 연결될 서비스
				login-processing-url : 로그인 처리할 주소 값 설정 * 시큐리티가 처리하는 것 
		-->
		
		<security:form-login login-page="/loginpage"
			username-parameter="userId" password-parameter="pw" 
			login-processing-url="/loginbs"
			authentication-success-forward-url="/loginsuccess"
			authentication-failure-forward-url="/loginfail"/>
		<!-- username-parameter, password-parameter -> 속성값  -->
		 <!-- security:intercept-url 이용하여 접근 허용 해줘야 함! -->
		
		
		<!-- 차단하고 허용할 url을 등록
			<security:intercept-url> : url 이용 권한을 확인하는 태그
			  - pattern : 권한을 확인한 주소 패턴을 작성
			  - access : 권한에 대한 설정
			    - permitAll() : 문자열 admin, user, manager,
			    - hasAnyAuthority()
			    - hasAuthority() : ROLE_ADMIN, ROLE_USER
			    - hasAnyRole()
			    - hasRole()
			    
		 -->
		<!-- 허용 안한 url 들어가면 응답 차단 (302 error page) -->
		<security:intercept-url pattern="/" access="permitAll()"/> <!-- 메인페이지 접근 허용 -->
		<security:intercept-url pattern="/resources/**" access="permitAll()"/> <!-- resources폴더 접근 허용 -->
		<security:intercept-url pattern="/loginpage" access="permitAll()"/> 
		<!-- WebMVCConfig에 	registry.addViewController("/loginpage")
		.setViewName("member/login"); -> 페이지 이동 설정 -->
		<security:intercept-url pattern="/demo/**"
			access="hasAnyAuthority('user', 'admin')"/> <!-- user권한은 /demo/** 만 권한 -->
		<security:intercept-url pattern="/manage/**"
			access="hasAnyAuthority('manager', 'admin')"/>
		<security:intercept-url pattern="/**/insert*"
			access="hasAuthority('insert')"/> 
		<security:intercept-url pattern="/**"
			access="hasAnyAuthority('admin')"/> 
		<!-- intercept-url if-else if문 처럼 위에서 걸리면 아래는 확인 안함! -->
		<!-- Member 에 List<GrantedAuthority> auth에서 권한 부여 -->
		
		<!-- 권한이 없는 사용자가 접근했을 때 error페이지 설정하기 (설정 안하면 404) -->
		<security:access-denied-handler error-page="/WEB-INF/views/common/error/authentication.jsp"/>

		<!-- logout에 대한 설정하기
		 <security:logout/>  태그 이용
		 logout-url : 로그아웃 로직을 처리할 주소 default : logout
		 logout-success-url : 로그아웃 처리 후 이동할 URL(로직이 필요한 경우 사용)
		-->
		<!-- <security:logout logout-url="/logout.do"/> -->
		<security:logout invalidate-session="true" logout-url="/logout"/>
		
		<!-- remember-me 구현하기 (로그인 한 상태로 브라우저 껐다 켰을 때) -->
		<!-- <security:remember-me> 태그 이용 
				remember-me-parameter : checkbox의 name값 설정
				user-service-ref : 인증처리 provider 설정 
				token-validaty-seconds : 인증 유지 시간 설정 -->
		<security:remember-me 
			remember-me-parameter="saveUser"
			user-service-ref="loginProvider"
			token-validity-seconds="86400"/> <!-- 하루 유지 -->
		
		
		<!-- CSRF설정 해지 -->
		<security:csrf disabled="true"/> <!-- disabled-> default : true -->
		<security:form-login/>
	</security:http>
	
	
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="loginProvider"> <!-- 인증 처리 제공자 (아래 빈으로 등록) -->
			<security:password-encoder ref="bcryptPassword"/>
<!-- 		<security:authentication-provider> ->DB연결 없이 --> 
			<!-- DB연결 없이 (고정) -->
			<!--<security:user-service>
				<security:user name="admin" authorities="admin" 
				password="$2a$10$QV49sa2yO.97l7VPgi/nMeL8Ton8icMF47PnSYNG72ra.ZVqJyQAy"/> 암호화된 값(1234)
				<security:user name="user01" authorities="user" 
				password="$2a$10$QV49sa2yO.97l7VPgi/nMeL8Ton8icMF47PnSYNG72ra.ZVqJyQAy"/> 암호화된 값(1234)
			</security:user-service> -->
			
			<security:password-encoder ref="bcryptPassword"/>
			
		</security:authentication-provider>
	</security:authentication-manager>
	
	<bean id="securityDao" class="com.bs.spring.member.model.dao.MemberDaoImpl">
	</bean>
	
	<bean id="loginProvider" class="com.bs.spring.security.service.SecurityLoginProvider">
		<constructor-arg index="0" ref="securityDao"/>
		<constructor-arg index="1" ref="sqlSessionTemplate"/>
		
	</bean>
	
	
	
	
	
	
	
</beans>










